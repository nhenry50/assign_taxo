/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs

params {

    // Input options
    inputfasta = "manifest.txt"

    // Output options

    outdir = "outputs"

    // taxonomic assignment options
    refdb = 'silva'
    fastachunks = 1000
    idtaxa_thresh = 50

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory = '128.GB'
    max_cpus = 16
    max_time = '240.h'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        conda.enabled          = false
        singularity.enabled    = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
    }
}

docker.registry      = 'quay.io'
singularity.registry = 'quay.io'

manifest {
    name            = 'taxonomic_assignment'
    author          = """Nicolas Henry"""
    homePage        = 'https://github.com/nhenry50/assign_taxo'
    description     = """Taxonomic assignment with IDTAXA"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '0.0.0'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}